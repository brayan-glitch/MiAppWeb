const express = require("express");
const router = express.Router();
const Codigo = require("../models/codigo"); // Importar el modelo

// üìå Ruta para ver c√≥digos con filtro opcional por duraci√≥n
router.get("/", async (req, res) => {
  try {
    const filtroDuracion = req.query.duracion; // üìå Capturamos la duraci√≥n si se envi√≥ en la URL
    let query = {};

    if (filtroDuracion) {
      query.duracion = filtroDuracion; // Filtrar solo si se seleccion√≥ una duraci√≥n
    }

    const codigos = await Codigo.find(query).populate("usuarioUso"); // Cargar usuario si se us√≥ el c√≥digo
    res.render("gestion_codigos", { codigos, filtroDuracion });
  } catch (error) {
    console.error("Error obteniendo c√≥digos:", error);
    res.status(500).send("Error interno del servidor.");
  }
});
// üìå Ruta para mostrar la p√°gina de gesti√≥n de c√≥digos
router.get("/", async (req, res) => {
  try {
    const codigos = await Codigo.find();
    res.render("gestion_codigos", { codigos });
  } catch (error) {
    console.error("Error al obtener los c√≥digos:", error);
    res.status(500).send("Error interno del servidor");
  }
});


// üìå Ruta para agregar c√≥digos desde la web
// üìå Ruta para agregar nuevos c√≥digos
router.post("/agregar", async (req, res) => {
  try {
      const { codigosTexto, duracion } = req.body;

      if (!codigosTexto || !duracion) {
          req.flash("mensaje", "‚ö†Ô∏è Debes ingresar c√≥digos y seleccionar una duraci√≥n.");
          return res.redirect("/codigos");
      }

      // üîπ Separar los c√≥digos por l√≠neas, eliminar espacios y filtrar vac√≠os
      const codigosArray = codigosTexto.split("\n").map(c => c.trim()).filter(c => c);

      // üîπ Filtrar c√≥digos v√°lidos (solo letras y n√∫meros permitidos)
      const codigosValidos = codigosArray.filter(c => /^[a-zA-Z0-9]+$/.test(c));

      if (codigosValidos.length === 0) {
          req.flash("mensaje", "‚ö†Ô∏è No se agregaron c√≥digos v√°lidos.");
          return res.redirect("/codigos");
      }

      // üîπ Verificar si los c√≥digos ya existen
      const codigosExistentes = await Codigo.find({ valor: { $in: codigosValidos } });
      const codigosNuevos = codigosValidos.filter(c => !codigosExistentes.some(e => e.valor === c));

      if (codigosNuevos.length === 0) {
          req.flash("mensaje", "‚ö†Ô∏è Todos los c√≥digos ya est√°n registrados.");
          return res.redirect("/codigos");
      }

      // üîπ Insertar c√≥digos nuevos con fecha de agregado
      const codigosGuardar = codigosNuevos.map(c => ({ valor: c, duracion, fechaAgregado: new Date() }));
      await Codigo.insertMany(codigosGuardar);

      req.flash("mensaje", `‚úÖ Se agregaron ${codigosGuardar.length} c√≥digos correctamente.`);
      res.redirect("/codigos");
  } catch (error) {
      console.error(error);
      req.flash("mensaje", "‚ùå Hubo un error al agregar los c√≥digos.");
      res.redirect("/codigos");
  }
});
  

// üìå Ruta para eliminar un c√≥digo
router.post("/eliminar/:id", async (req, res) => {
  try {
    await Codigo.findByIdAndDelete(req.params.id);
    res.redirect("/codigos");
  } catch (error) {
    console.error("Error al eliminar el c√≥digo:", error);
    res.status(500).send("Error interno del servidor");
  }
});

module.exports = router;
